
from PyQt6.QtWidgets import QFileDialog, QPushButton, QLineEdit, QMessageBox, QDateEdit, QDialog, QComboBox, QMenuBar, QMenu, QTableWidgetItem, QTableView, QHeaderView, QVBoxLayout, QLabel
from PyQt6.QtCore import QDateTime, Qt, QDate, QEvent
import shutil
from datetime import date, datetime
from dis_form.dis_wid_add_update import Ui_Dialog_add
from class_database import Database
from random import randint

import os



class widget_add(QDialog, Ui_Dialog_add):
    def __init__(self, table_name, function_name, position, MainWindow):
        super().__init__()
        self.setupUi(self)
        self.setModal(True)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        self.setWindowFlags(self.windowFlags() | Qt.WindowType.WindowStaysOnTopHint)

        self.datab = Database()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.main = MainWindow  # –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.table_name = table_name  # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
        self.function_name = function_name
        self.position = position
        self.data_photo = []

        self.creating_widget_add_fields()  # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    def creating_widget_add_fields(self):
        try:
            self.clear_layout()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è
            columns =  self.datab.get_holder(self.table_name)
            print(columns)
            columns.remove('ID')

            for column in columns:
                if 'ID_' in column:
                    fields = QComboBox()  # –î–ª—è –∫–æ–ª–æ–Ω–æ–∫ —Å ID —Å–æ–∑–¥–∞–µ–º ComboBox
                    self.add_item_comboBox(fields, column)
                elif '–î–∞—Ç–∞' in column:
                    fields = QDateEdit()  # –î–ª—è –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–µ–º DateEdit
                elif '–§–æ—Ç–æ' in column:
                    fields = QPushButton()
                    fields.setText('NULL')
                    fields.clicked.connect(self.select_file)

                elif '–°—Ç–∞—Ç—É—Å' in column:
                    fields = QComboBox()  # –î–ª—è –∫–æ–ª–æ–Ω–æ–∫ —Å ID —Å–æ–∑–¥–∞–µ–º ComboBox
                    fields.addItem('–ê–∫—Ç–∏–≤–Ω—ã–π')
                    fields.addItem('–£–≤–æ–ª–µ–Ω')
                    if self.position == '–°–æ—Ç—Ä—É–¥–Ω–∏–∫' or self.table_name == '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏':
                        fields.setEnabled(False)


                elif '–î–æ–ª–∂–Ω–æ—Å—Ç—å' in column:
                    fields = QComboBox()  # –î–ª—è –∫–æ–ª–æ–Ω–æ–∫ —Å ID —Å–æ–∑–¥–∞–µ–º ComboBox
                    fields.addItem('–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å')
                    fields.addItem('–°–æ—Ç—Ä—É–¥–Ω–∏–∫')
                    if self.position == '–°–æ—Ç—Ä—É–¥–Ω–∏–∫':
                        fields.setEnabled(False)
                else:
                    fields = QLineEdit()  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                    fields.setPlaceholderText(column)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç-–ø–æ–¥—Å–∫–∞–∑–∫—É


                self.stile_fields(fields)  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –ø–æ–ª—è–º
                self.layout_param.addWidget(fields)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ –º–∞–∫–µ—Ç


        except Exception as e:
            QMessageBox.information(self, '–í–Ω–∏–º–∞–Ω–∏–µ', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞!')
            print(f"7 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

    def select_file(self):
        file_dialog = QFileDialog()
        file_dialog.setNameFilter("Images (*.jpg *.jpeg)")
        file_dialog.setFileMode(QFileDialog.FileMode.ExistingFile)

        forbidden_folder = "/photo"

        if file_dialog.exec():
            selected_file = file_dialog.selectedFiles()[0]  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É

            if forbidden_folder in selected_file:
                QMessageBox.warning(None, "–û—à–∏–±–∫–∞", "–î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω!")
                return

            destination_folder = "photo"

            file_name = os.path.basename(selected_file)
            destination_path = os.path.join(destination_folder, file_name)

            self.data_photo = [selected_file, destination_path]

    def move_file(self, selected_file, destination_path):
        try:
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
            shutil.copy(selected_file, destination_path)
        except Exception as e:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å: {str(e)}')

    def clear_layout(self):
        try:
            while self.layout_param.count():
                item = self.layout_param.takeAt(0)
                widget = item.widget()
                if widget:
                    widget.deleteLater()

        except Exception as e:
            print(f"8 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

    def add_item_comboBox(self, fields, column):
        try:
            table_name = column.replace("ID_", "")  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å ID_
            for item in self.datab.query_fields_for_comboBox(table_name):  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ComboBox
                fields.addItem(item)


        except Exception as e:
            print(f"9 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

    def opr_widget_add_fields(self):
        try:
            widget_add_fields = []
            for i in range(self.layout_param.count()):
                item = self.layout_param.itemAt(i)
                if item.widget():
                    widget_add_fields.append(item.widget())  # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –≤ —Å–ø–∏—Å–æ–∫
            return widget_add_fields


        except Exception as e:
            print(f"10 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

    def open_widget_add(self, id):
        try:
            widget_add_fields = self.opr_widget_add_fields()  # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            if self.function_name == 'üñãÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å':
                if id:
                    data_of_table = self.datab.query_select_table_by_id(self.table_name, id)[0]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ ID
                    self.output_of_fields(data_of_table, widget_add_fields)  # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–∞–Ω–Ω—ã–º–∏
                    self.but_save_add.clicked.connect(lambda: self.update_column(id, widget_add_fields))  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    self.show()
                else:
                    QMessageBox.information(self, '–í–Ω–∏–º–∞–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ ID')

            elif self.function_name == '‚ûï –ù–æ–≤—ã–π':
                self.but_save_add.clicked.connect(lambda: self.add_new_column(widget_add_fields))  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                self.show()

            elif self.function_name == 'üöõ':
                return widget_add_fields





        except Exception as e:
            print(f"11 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

    def create_delivers(self, widget_add_fields):
        try:
            table_name = 'deliveries'
            id = self.datab.incr(table_name)
            values = self.opr_of_field_values(id, widget_add_fields)

            current_datetime = datetime.now()
            formatted_datetime = current_datetime.strftime("%Y-%m-%d %H:%M:%S")

            values.append(formatted_datetime)
            values.append(0)
            self.datab.query_add_new_column(table_name, values)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            self.close()
            return values

        except Exception as e:
            print(f"12 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

    def create_sales(self):
        try:
            table_name = 'sales'
            id = self.datab.incr(table_name)
            current_datetime = datetime.now()
            formatted_datetime = current_datetime.strftime("%Y-%m-%d %H:%M:%S")

            values = [id, formatted_datetime, 0]
            self.datab.query_add_new_column(table_name, values)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            self.close()
            return values

        except Exception as e:
            print(f"13 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

    def add_new_column(self, widget_add_fields):
        try:
            id = self.datab.incr(self.table_name)  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π ID
            values = self.opr_of_field_values(id, widget_add_fields)  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
            print(values)
            if values:
                self.datab.query_add_new_column(self.table_name, values)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                self.data_photo.clear()
                self.close()
                self.main.opr_sql_query()

        except Exception as e:
            print(f"14 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

    def opr_of_field_values(self, id, widget_add_fields):
        try:
            values = []
            values.append(id)  # –î–æ–±–∞–≤–ª—è–µ–º ID
            value = None
            for field in widget_add_fields:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ

                if isinstance(field, QComboBox):
                    value_name = field.currentText() if field.currentIndex() != -1 else field.placeholderText()
                    columns =  self.datab.get_holder(self.table_name)
                    print(field.placeholderText())
                    if value_name in ['–ê–∫—Ç–∏–≤–Ω—ã–π', '–£–≤–æ–ª–µ–Ω','–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å','–°–æ—Ç—Ä—É–¥–Ω–∏–∫']:
                        value = value_name
                    else:
                        for column in columns:
                            if 'ID_' in column:
                                table_name = column.replace("ID_", "")
                                value = self.datab.query_opr_id(table_name, value_name)
                                if value:
                                    break


                elif isinstance(field, QDateEdit):
                    date = field.date()
                    value = date.toString(Qt.DateFormat.ISODate)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É

                elif isinstance(field, QPushButton):
                    if self.data_photo != []:
                        value = self.data_photo[1]
                        self.move_file(self.data_photo[0], self.data_photo[1])
                        if os.path.exists(field.text()) and 'photo/' not in field.text():
                            os.remove(field.text())

                    else:
                        value = field.text()
                else:
                    value = str(field.text()).strip()
                    column = field.placeholderText()
                    int_columns = self.datab.get_integer_columns(self.table_name)
                    dec_columns = self.datab.get_decimal_columns(self.table_name)

                    if column in ['–ü–∞—Ä–æ–ª—å', '–õ–æ–≥–∏–Ω'] and len(value) < 6:
                        value = str(randint(100000, 999999))
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
                    if column in int_columns:
                        try:
                            value = int(value)
                        except ValueError:
                            print(f"–ó–Ω–∞—á–µ–Ω–∏–µ '{value}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
                            field.setText('')
                            field.setPlaceholderText('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
                            return False

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
                    elif column in dec_columns:
                        try:
                            value = float(value)
                        except ValueError:
                            print(f"–ó–Ω–∞—á–µ–Ω–∏–µ '{value}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π.")
                            field.setText('')
                            field.setPlaceholderText('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
                            return False

                values.append(value)
            return values  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π

        except Exception as e:
            print(f"15 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

    def is_float(self, value) :
        try:
            float(value)
            return True
        except ValueError:
            return False

    def update_column(self, id, widget_add_fields):
        try:
            values = self.opr_of_field_values(id, widget_add_fields)
            print('sfdfv',values)
            print(values)
            if values:
                holders = [holder.strip() for holder in self.datab.get_holder(self.table_name)]
                print(1)# –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                self.datab.query_update_column(holders, values, self.table_name)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.close()
                self.main.opr_sql_query()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É

        except Exception as e:
            print(f"16 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

    def output_of_fields(self, data, widget_add_fields):
        try:
            for i, le in enumerate(widget_add_fields, start=1):
                value = data[i] if data[i] is not None else ""  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
                if isinstance(le, QComboBox):

                    if value in ['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å','–°–æ—Ç—Ä—É–¥–Ω–∏–∫','–£–≤–æ–ª–µ–Ω','–ê–∫—Ç–∏–≤–Ω—ã–π']:
                        le.setCurrentText(value)
                    elif value == "":
                        le.setCurrentIndex(0)
                    else:
                        le.setCurrentIndex(int(value)-1)

                elif isinstance(le, QDateEdit):
                    date = QDate.fromString(str(value), "yyyy-MM-dd")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É
                    le.setDate(date)
                elif isinstance(le, QPushButton):
                    le.setText(str(value.replace("\\", "/")))
                else:
                    le.setText(str(value))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ

        except Exception as e:
            print(f"17 –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

    def stile_fields(self, fields):
        fields.setStyleSheet("\n"
                             "border-radius: 7px;\n"
                             "width:230px;\n"
                             "height:35px")